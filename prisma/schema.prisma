// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dashboard_users {
  id         Int     @id @default(autoincrement())
  email_id   String  @unique @db.VarChar(255)
  password   String
  role       String  @db.VarChar(255)
  token      String?
  expiryDate BigInt?
}

model news {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  body       String
  image_url  String?
  news_url  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model notifications {
  id                  Int                     @id @default(autoincrement())
  title               String                  @db.VarChar(255)
  body                String
  for_all             Boolean                 @default(true)
  created_at          DateTime                @default(now())
  updated_at          DateTime                @updatedAt
  member_notification members_notifications[]
}

// TODO: 
// Link to bank details & transactions
// Recheck datatypes
model members {
  id                  Int                     @id @default(autoincrement())
  ycf_id              String                  @unique @db.VarChar(255)
  full_name           String
  mobile_number       Int
  aadhaar_number      BigInt
  pancard_number      String                  @db.VarChar(255)
  address             String
  member_notification members_notifications[]
}

// Many to many relation between members and notification
model members_notifications {
  member          members       @relation(fields: [member_id], references: [id])
  member_id       Int
  notification    notifications @relation(fields: [notification_id], references: [id])
  notification_id Int

  @@id([member_id, notification_id])
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }
