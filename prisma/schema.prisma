// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dashboard_users {
  id            Int             @id @default(autoincrement())
  first_name    String?          @db.VarChar(255)
  last_name     String?          @db.VarChar(255)
  email_id      String          @unique @db.VarChar(255)
  password      String
  role          DASHBOARD_ROLES @default(ADMIN)
  refresh_token String?
  expiry_at     DateTime?
  member_bank_transaction member_bank_transaction[]
}

model news {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  body       String?
  plain_text_body String?
  image_url  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model notifications {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  body       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  member     members[] //one notification can have many members
}

// TODO: 
// Link to bank details & transactions
// Recheck datatypes
// Recheck optional fields
model members {
  id                      Int                       @id @default(autoincrement())
  ycf_id                  String                    @unique @db.VarChar(255)
  full_name               String
  mobile_number           String                    @unique
  aadhaar_number          String                    @unique
  pancard_number          String                    @unique @db.VarChar(255)
  address                 String
  pincode                 String
  trashed                 Boolean?
  profile_photo           String?
  yearly_quota            String?
  balance_amount          String?
  children                children[]
  refresh_token           refresh_tokens[]
  notification            notifications[] // member can have many notification
  modules                 MODULES_ACCESS[]
  bank_detail             bank_details[]
  member_bank_transaction member_bank_transaction[]
}

model bank_details {
  id                  Int     @id @default(autoincrement())
  bank_name           String  @db.VarChar(255)
  bank_account_number String  @db.VarChar(255)
  ifsc_code           String  @db.VarChar(255)
  bank_branch_name    String  @db.VarChar(255)
  member              members @relation(fields: [member_id], references: [id])
  member_id           Int
}

model children {
  id                  Int     @id @default(autoincrement())
  child_name          String
  school_college_name String
  standard_grade      String
  member              members @relation(fields: [member_id], references: [id])
  member_id           Int
}

model ycf_id_counter {
  id          Int    @id @default(autoincrement())
  last_ycf_id String
}

model member_bank_transaction {
  id                  Int     @id @default(autoincrement())
  amount_requested    BigInt? 
  status              TRANSACTION_STATUS @default(PENDING)
  transaction_date    DateTime?
  module              MODULES_ACCESS?
  admin_name          String?   
  receipts            receipts[]
  approved_by         dashboard_users? @relation(fields: [admin_id], references: [id])
  admin_id            Int?
  member              members @relation(fields: [member_id], references: [id])
  member_id           Int
}

model receipts {
  id                  Int     @id @default(autoincrement())
  receipt_link        String 
  transaction         member_bank_transaction @relation(fields: [transaction_id], references: [id])
  transaction_id      Int
  upload_date         DateTime  @default(now())
}

model chemists {
  id        Int    @id @default(autoincrement())
  name      String
  address   String
  longitute String
  latitute  String
}

model hospitals {
  id        Int    @id @default(autoincrement())
  name      String
  address   String
  longitute String
  latitute  String
}

// Change device id to be unique 
// and invalidate_before and device id to be mandatory
model refresh_tokens {
  id                Int       @id @default(autoincrement())
  refresh_token     String    @unique
  expiry_at         DateTime
  member            members   @relation(fields: [member_id], references: [id])
  member_id         Int
  device_id         String?   @unique
  invalidate_before DateTime?
}

enum DASHBOARD_ROLES {
  SUPERADMIN
  ADMIN
}

enum MODULES_ACCESS {
  EDUCATION
  MEDICAL
  HOUSEHOLD
}

enum TRANSACTION_STATUS {
  APPROVED
  REJECTED
  PENDING
}